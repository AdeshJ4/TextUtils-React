{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alerts.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","trimText","trim","style","color","heading","value","onChange","event","target","rows","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alerts","alert","word","lower","charAt","slice","capitalize","msg","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3ca03344.chunk.js","sourcesContent":["//react function based component\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link> */}\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>  \r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\n\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired\r\n};\r\n\r\n\r\nNavbar.defaultProps = {\r\n  title: 'Set title here',\r\n  aboutText: 'About text here'\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n{/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    \r\n    const handleUpperClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase\", \"success\");\r\n    }\r\n    \r\n    const handleLowerClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase\", \"success\");\r\n    }\r\n\r\n    const handleClearText = () => {\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared!\", \"success\");\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        let newText = document.getElementById('myBox');\r\n        newText.select();\r\n        navigator.clipboard.writeText(newText.value);\r\n        props.showAlert(\"Copied to clipboard!\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpace = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces has been removed!\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n\r\n    //state variable\r\n    const [text, setText] = useState(\"\");\r\n    \r\n    let trimText = text.trim();\r\n\r\n    //jsx\r\n    return (\r\n        <>\r\n            <div className=\"container my-4\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n                <h1 >{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"myBox\" className=\"form-label\">Write below</label>\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"myBox\" rows=\"15\" \r\n                              style={{backgroundColor: props.mode==='dark'?'gray':'white', \r\n                                      color: props.mode === 'dark'?'white':'#042743'}}\r\n                    >\r\n                    </textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleUpperClick}>Convert to Uppercase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleLowerClick}>Convert to Lowercase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleClearText}>Clear Text</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpace}>Remove Extra spaces</button>\r\n            </div>\r\n\r\n            <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n                <h2>Your Text Summary</h2>\r\n                <p>{trimText.split(' ').length} words, {trimText.length} words</p>\r\n                <p>{0.008 * trimText.split(\" \").length} Minutes read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text:'Enter Something to preview it here'}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alerts(props) {\r\n\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n\r\n  return (\r\n      props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        {/* <button\r\n          type=\"button\"\r\n          className=\"btn-close\"\r\n          data-bs-dismiss=\"alert\"\r\n          aria-label=\"Close\"\r\n        ></button> */}\r\n      </div>\r\n  );\r\n}\r\n","// Master Branch\r\nimport './App.css';\r\n// import About from './components/About';\r\nimport Navbar from './components/Navbar';\r\nimport TextForm from './components/TextForm';\r\nimport React, { useState } from 'react';\r\nimport Alerts from './components/Alerts';\r\n// import {\r\n//   BrowserRouter as Router,\r\n//   Switch,\r\n//   Route,\r\n//   Link\r\n// } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState('light'); //whether dark mode is enable or not\r\n  const [alert, setAlert] = useState(null);//alert is object\r\n\r\n  const showAlert = (message, type) => {\r\n    setAlert({\r\n      msg: message,\r\n      type: type\r\n    })\r\n\r\n    //display alert message for specific time\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 3000);\r\n  }\r\n\r\n  const toggleMode = () => {\r\n    if (mode === 'light') {\r\n      setMode('dark');\r\n      document.body.style.backgroundColor = '#042743';\r\n      showAlert(\"Dark Mode has been enabled\", \"success\");\r\n      document.title = 'TextUtils - Dark Mode';\r\n      // setInterval(() => {\r\n      //   document.title = 'Install TextUtils';\r\n      // }, 3000);\r\n    } else {\r\n      setMode('light');\r\n      document.body.style.backgroundColor = 'white';\r\n      showAlert(\"Light Mode has been enabled\", \"success\");\r\n      document.title = 'TextUtils - Light Mode';\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* <Router> */}\r\n        <Navbar title=\"TextUtils\" aboutText=\"About Us\" mode={mode} toggleMode={toggleMode} />\r\n        <Alerts alert={alert} />\r\n        <div className=\"container my-3\">\r\n          {/* <Switch>\r\n            <Route path=\"/About\">\r\n              <About />\r\n            </Route>\r\n            <Route path=\"/\"> */}\r\n              <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode} />\r\n            {/* </Route>\r\n          </Switch> */}\r\n        </div>\r\n      {/* </Router> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}